 /**
 * Библиотека расширений функций прототипов объектов JavaScript (полифилов)
 */

// Явное указание на режим строгого соответствия современному стандарту
"use strict";

/**
 * Метод "in_array"
 * Проверяет присутствует ли значение "needle" в объекте (массиве), на котором был вызван метод
 *
 * Аргументы:
 * * needle (тип: string) - Искомый элемент объекта (массива)
 *
 * Возвращаемое значение:
 * * true/false (тип: boolean) - "Да" - если элемент найден; "Нет" - Если элемент отсутствует
 */
Object.prototype.in_array = function(needle) {
    // Обход объекта (массива), в котором необходимо искать совпадения значений элементов, в цикле
    for(var i = 0, l = this.length; i < l; i++)	{
        // Если значение элемента на текущей итерации равно искомому значению
        if(this[i] == needle) {
            // Возвращаение положительного результата
            return true;
        }
    }
    // Возвращаение отрицательного результата
    return false;
}

/**
 * Метод "array_diff"
 * Вычисляет расхождение объектов (массивов). Сравнивает объект (массив), на котором был вызван метод с объектов (массивом) "filteringArray" и возвращает значения из исходного объекта (массива), которые отсутствуют в "filteringObject".
 *
 * Аргументы:
 * * filteringObject (тип: object) - Объект (массив) с котороым необходимо произвести сравнение
 *
 * Возвращаемое значение:
 * * resultArray (тип: array) - Результат сравнения. 
 */
Object.prototype.array_diff = function(filteringObject) {
    var resultArray = [];
    // Обход объекта (массива), в котором необходимо искать совпадения значений элементов, в цикле
    for(var i = 0, l = this.length; i < l; i++)	{
        // Если значение элемента объекта (массива) равно искомому значению
        if( !filteringObject.in_array(this[i]) ) {
            // Добавление эелемента в массив результата сравнения
            resultArray.push(this[i]);
        }
    }
    // Возвращаение результата сравнения в виде массива
    return resultArray;
}