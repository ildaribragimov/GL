// Явное указание на режим строгого соответствия современному стандарту
"use strict";

// Исполнение скрипта при готовности DOM-структуры документа
$.documentReady(function () {

    /**
     * Класс проверки и отправки форм на сервер
     *
     * Аргумменты:
     * * form (тип: object) - Ссылка на объект формы, которую необходимо предварительно проверить перед отправкой
     */
    function FormExt(form) {
        /**
         * Объявление переменных
         */
        var form = form, // Ссылка на объект формы
            elements = form.elements,
            buttons = form.querySelectorAll('button, [type="button"], [type="submit"], [type="reset"]'), // Ссылка на коллекцию элементов формы
            fields = elements.array_diff(buttons); // Массив отфильтрованных (от кнопок действий) элементов формы
                
        /**
         * Метод проверяет пуста ли форма
         *
         * Возвращаемое значение:
         * * false/true (тип: boolean) - "ДА" (если форма имеет хотя бы одно незаполненное поле) / "НЕТ" (Если форма заполнена полностью)
         */
        function isFormEmpty() {
            // Обход коллеции объектов в массиве
            for (var f = 0; f < fields.length; f++) {
                // Если тип элемента формы - captcha
                if ( ~fields[f].name.toLowerCase().indexOf('captcha') ) {
                    // Прерывание выполнения текущей итерации и переход к следующей итерации
                    continue;
                }
                // Если содержимое элемента формы пустое
                if ( fields[f].value == '' ) {
                    // Возвращение результата "Да, форма либо пуста, либо не все элементы заполнены"
                    return true;
                }
            }
            // Возвращение результата "Нет, форма заполнена полностью"
            return false;
        }

        /**
         * Метод активирует/деактивирует кнопки действий формы в зависимости от готовности формы к проверке содержимого
         *
         * Параметры:
         * * state (тип: boolean) - статус доступности кнопок действий формы: true - кнопки доступны; false - кнопки не доступны.
         */
        function enableFormActions(state) {
            // Обход коллекции кнопок действий в цикле
            for ( var b = 0; b < buttons.length; b++ ) {
                // Переключаем атрибут "disabled" в завсисимости от готовности формы к проверке
                ( state )
                    ? buttons[b].removeAttribute('disabled') // Удаляем атрибут "disabled"
                    : buttons[b].setAttribute('disabled','') // Устанавливаем атрибут "disabled"
            }
        }

        /**
         * Метод проверяет значения поля формы на допустимость и валидность
         *
         * Возвращаемое значение:
         * * result (тип: object) - Объект системных сообщений о результатах проверки
         */
        function checkFormData() {
            // Объявление переменных:
            var logMsgs = [], // Массив сообщений об ошибках
                result = {
                    type: 'success',
                    report: ['Проверка данных прошла успешно!']
                };
            // Обход коллеции объектов в массиве
            for (var f = 0; f < fields.length; f++) {
                // Объявление переменных:
                var tagName = fields[f].tagName.toLowerCase(), // Название тега элемента формы
                    name = fields[f].name, // Значение атрибута "name" элемента формы
                    type = fields[f].type, // Значение атрибута "type" элемента формы
                    value = fields[f].value; // Содержимое элемента формы

                // Если тип элемента формы - captcha
                if ( ~name.toLowerCase().indexOf('captcha') ) {
                    // Если содержимое элемента формы не пустое
                    if ( value != '' ) {
                        // Формирование сообщения об ошибке
                        logMsgs[f] = 'Ошибка идентификации!';
                        // Прерывание выполнения цикла, выход из цикла
                        break;
                    }
                    // Прерывание выполнения текущей итерации и переход к следующей итерации
                    continue;
                }
                // Если содержимое элемента формы пустое
                if ( value == '' ) {
                    // Формирование сообщения об ошибке
                    logMsgs[f] = 'Поле не должно быть пустым!';
                    // Прерывание выполнения текущей итерации и переход к следующей итерации
                    continue;
                }
                // Проверка (по значнию атрибута "name") содержимого элемента формы на соответствие присвоенному типу поля
                switch ( name ) {
                    case 'name':
                        // Формирование регулярного выражения (любые символы кроме руссих букв и пробела) для поиска совпадений
                        var regExp = /(^[а-яА-ЯёЁ\s]*$)/i;
                        // Если совпадения найдены
                        if ( regExp.exec(value) == null) {
                            // Формирование сообщения об ошибке
                            logMsgs[f] = 'Имя должно состоять только из букв русского алфавита!';
                        }
                        // Прерывание выполнения конструкции "switch"
                        break;
                    case 'email':
                        // Формирование регулярного выражения (любые символы кроме руссих букв и пробела) для поиска совпадений
                        var regExp = /(^([a-z0-9]+[-._]{0,1})+@([a-z0-9]+[-._]{0,1})+\.+[A-z]{2,8}$)/i;
                        // Если совпадения найдены
                        if ( regExp.exec(value) == null) {
                            // Формирование сообщения об ошибке
                            logMsgs[f] = 'E-mail указан не верно!';
                        }
                        // Прерывание выполнения конструкции "switch"
                        break;
                    case 'phone':
                        // Формирование регулярного выражения (любые символы кроме руссих букв и пробела) для поиска совпадений
                        var regExp = /(\+?7[\s{1}]?[\({1}]?\d{3,6}[\){1}]?[\s{1}]?\d{1,3}[\s\-{1}]?\d{2}[\s\-{1}]?\d{2}\b)/;
                        // Если совпадения найдены ИЛИ длина значения поля меньше 6 символов
                        if ( regExp.exec(value) == null ) {
                            // Формирование сообщения об ошибке
                            logMsgs[f] = 'Номер телефона указан не верно!';
                        }
                        // Прерывание выполнения конструкции "switch"
                        break;
                    case 'message':
                        // Формирование регулярного выражения (любые символы кроме руссих букв и пробела) для поиска совпадений
                        var regExp = /([\<\>]|script|style)/i;
                        // Если совпадения найдены
                        if ( regExp.exec(value) !== null) {
                            // Формирование сообщения об ошибке
                            logMsgs[f] = 'Вводите только текст! HTML-теги недопустимы!';
                        }
                        // Прерывание выполнения конструкции "switch"
                        break;
                    default:
                        // Прерывание выполнения конструкции "switch"
                        break;
                }
            }
            // Если массив сообщений об ошибках не пустой
            if ( logMsgs.length > 0 ) {
                result.type = 'fail';
                result.report = logMsgs;
            }
            // Возвращение результата проверки
            return result;
        }

        // Вызов метода деактивации кнопок действий формы, если содержимое хотя бы одного элемента формы пустое
        enableFormActions( !isFormEmpty() );
        
        // Назначение обработчика события отправки формы на сервер
        form.addEventListener("submit", function(event) {
            // Если проверка данных формы вернула ошибку в данных
            if ( checkFormData().type == 'fail' ) {
                alert ('Данные формы НЕ корректны!');
                // Отмена действия по умолчанию браузера на событие
                preventDefault(event);
            } else {
                // Здесь вызываем методы, формирующие дополнитеьльные данные для проверки пользователя по тестам Тьюринга на сервере
            }
        });
        
        // Назначение обработчиков событий изменения содержимого эелементов формы
        for (var f = 0; f < fields.length; f++) {
            // Если тип элемента формы - captcha
            if ( ~fields[f].name.toLowerCase().indexOf('captcha') ) {
                // Прерывание выполнения текущей итерации и переход к следующей итерации
                continue;
            }
            // Назначение обработчика событий "onkeyup", "oninput", "onchange" 
            fields[f].onkeyup = fields[f].oninput = fields[f].onchange = function () {
                // Вызов метода проверки заполненности всех полей формы с последующей активацией/деактивацией кнопок действий формы
                enableFormActions( !isFormEmpty() );
            };
            // Назначение обработчика событий "onchange" для IE 8-
            fields[f].onpropertychange = function() {
                // Если имя изменённого свойства (атрибута) - "value"
                if (event.propertyName == "value") {
                    // Вызов метода проверки заполненности всех полей формы с последующей активацией/деактивацией кнопок действий формы
                    enableFormActions( !isFormEmpty() );
                }
            };
            // Назначние обработчика события "oncut"
            fields[f].oncut = function() {
                // Вызов метода проверки заполненности всех полей формы с последующей активацией/деактивацией кнопок действий формы
                setTimeout( enableFormActions( !isFormEmpty() ), 0); // на момент oncut значение еще старое
            };
        }
    }
    /* Конец класса проверки и отправки форм на сервер */

    // Созданеи экземпляров объекта FormExt форм
    var sendMailForm = new FormExt( document.getElementById('sendMail') ),
        sendReviewForm = new FormExt( document.getElementById('sendReview'));
});